//
//  main.cpp
//  1214
//
//  Created by SeacenLiu on 2018/4/25.
//  Copyright © 2018年 成. All rights reserved.
//

/**
 Problem
 圆桌会议
 
 Problem Description:
 HDU ACM集训队的队员在暑假集训时经常要讨论自己在做题中遇到的问题.每当面临自己解决不了的问题时,他们就会围坐在一张圆形的桌子旁进行交流,经过大家的讨论后一般没有解决不了的问题,这也只有HDU ACM集训队特有的圆桌会议,有一天你也可以进来体会一下哦:),在一天在讨论的时候,Eddy想出了一个极为古怪的想法,如果他们在每一分钟内,一对相邻的两个ACM队员交换一下位子,那么要多少时间才能得到与原始状态相反的座位顺序呢?(即对于每个队员，原先在他左面的队员后来在他右面，原先在他右面的队员在他左面),这当然难不倒其他的聪明的其他队友们,马上就把这个古怪的问题给解决了,你知道是怎么解决的吗?
 
 Input:
 对于给定数目N(1<=N<=32767)，表示有N个人,求要多少时间才能得到与原始状态相反的座位顺序(reverse)即对于每个人，原先在他左面的人后来在他右面，原先在他右面的人在他左面。
 
 Output:
 对每个数据输出一行，表示需要的时间(以分钟为单位)
 
 Sample Input:
 4
 5
 6
 
 Sample Output:
 2
 4
 6
 */

// Tip:
// 从计算时间出发的思路!!!
// 邻位交换
// 冒泡排序 一条直线 时间为n(n-1)/2
// 本题 一个圆 不能单单的当成是一条直线
// ==> 可以把它看成是两条直线来判断
//     设其中一段的长度为a，那么总共需要的时间就是 a(a-1)/2+(n-a)(n-a-1)/2
//     a == n/2 时，时间最小

#include <iostream>
using namespace std;
int main(int argc, const char * argv[]) {
    int n, a, b;
    while (cin >> n) {
        a = n/2;
        b = n-a;
        cout << a*(a-1)/2 + b*(b-1)/2 << endl;
    }
    return 0;
}
